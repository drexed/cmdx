# frozen_string_literal: true

# RSpec matcher for asserting that a task result has caused its own failure.
#
# This matcher checks if a CMDx::Result object represents a failure that originated
# within the task itself, as opposed to a failure that was thrown from or received
# from another task. A result is considered to have caused failure when it's both
# failed and the failure was generated by the task's own logic rather than propagated
# from elsewhere in the chain.
#
# @return [Boolean] true if the result is failed and caused the failure itself
#
# @example Testing task that fails due to validation
#   result = ValidateUserTask.call(email: "invalid-email")
#   expect(result).to have_caused_failure
#
# @example Testing task that fails due to business logic
#   result = ProcessPaymentTask.call(amount: -100)
#   expect(result).to have_caused_failure
#
# @example Distinguishing from thrown failures
#   result = TaskThatThrowsFailure.call(data: "invalid")
#   expect(result).to have_caused_failure  # This task caused its own failure
#   expect(result).not_to have_thrown_failure
#
# @example Testing in workflow context
#   workflow_result = MyWorkflow.call(data: "invalid")
#   failing_task = workflow_result.chain.find(&:failed?)
#   expect(failing_task).to have_caused_failure
#
# @example Negative assertion
#   result = SuccessfulTask.call(data: "valid")
#   expect(result).not_to have_caused_failure
#
# @example Testing error handling origin
#   result = DatabaseTask.call(connection: nil)
#   expect(result).to have_caused_failure.and be_failed
#
# @since 1.0.0
RSpec::Matchers.define :have_caused_failure do
  match do |result|
    result.failed? && result.caused_failure?
  end

  failure_message do |result|
    if result.failed?
      "expected result to have caused failure, but it threw/received a failure instead"
    else
      "expected result to have caused failure, but it was not failed (status: #{result.status})"
    end
  end

  failure_message_when_negated do |_result|
    "expected result not to have caused failure, but it did"
  end

  description do
    "have caused failure"
  end
end
